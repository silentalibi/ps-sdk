// Version: 2019.4.16// call a function so we can hide variables from other scriptsmain();function main() {LogMessage( "Starting test: LayerFormat:" );// Save the current preferencesvar startRulerUnits = preferences.rulerUnits;var startTypeUnits = preferences.typeUnits;var startDisplayDialogs = displayDialogs;// Set Photoshop to use pixels and display no dialogspreferences.rulerUnits = Units.PIXELS;preferences.typeUnits = TypeUnits.PIXELS;displayDialogs = ShowDialog();var maxTime = MaxTime( 5 * 60 );var iterations = 5;var formatExtension = ".lyr";var timeIt = new Timer();var tests = 0;var errors = 0;var eArray = new Array();var layerFormatLog = new File( Folder.desktop + "/LayerFormat.log" );layerFormatLog.open( "w", "TEXT", "????" );layerFormatLog.writeln( "width,\theight,\tdepth,\tsave POSIX,\ttime,\tsave POSIX,\ttime,\topen POSIX,\ttime,\topen POSIX,\ttime,\tmax est size,\terrors,\ttests" );var maxWidth = 30000;var minWidth = 256;var incWidth = parseInt( (maxWidth - minWidth) / iterations );if ( incWidth == 0 )	incWidth = 1;var maxHeight = 30000;var minHeight = 256;var incHeight = parseInt( (maxHeight - minHeight) / iterations );if ( incHeight == 0 )	incHeight = 1;var openAsSmart = false;var maxEstSize = 0;// start cleanwhile (documents.length) {    activeDocument.close(SaveOptions.DONOTSAVECHANGES);}var fileStr = Folder.desktop + "/LayerFormatTests/LayerFormatTest_";Folder( Folder.desktop + "/LayerFormatTests" ).create();var fileIndex = 1;var d = BitsPerChannelType.EIGHT;for ( var w = minWidth; w < maxWidth; w += incWidth ) {	for ( var h = minHeight; h < maxHeight; h += incHeight ) {					try {						var timeSave = new Timer();							if ( d == BitsPerChannelType.EIGHT )				d = BitsPerChannelType.SIXTEEN;			else				d = BitsPerChannelType.EIGHT;			// i can only go to 2 gig on files, and let's round down to 80% for overhead			var estFileSize = w * h * 3 * ( d == BitsPerChannelType.EIGHT ? 1 : 2 );			if ( estFileSize >= ( 2147483648 * 0.8 ) ) {				LogMessage( "skipping" );				// alert("skipping"); 				continue;			}			if ( estFileSize > maxEstSize )				maxEstSize = estFileSize;			LogMessage( "Est: " + estFileSize );			var doc = app.documents.add(UnitValue(w, "px"),                                         UnitValue(h,"px"),                                         undefined,                                         "LayerFormat Test " + w + " " + maxWidth + " " + h + " " + maxHeight,                                         undefined,                                         undefined,                                         undefined,                                         d);			doc.activeLayer.isBackgroundLayer = false;			doc.activeLayer.name = "LayerFormat Test 1";			SpectrumGradient();			doc.artLayers.add();			doc.activeLayer.name = "LayerFormat Test 2";						SpectrumGradient();			// write it out twice and then switch it on read						var f = new File( fileStr + fileIndex.toString() + formatExtension );			try {            	            	LayerFormatSave( f, false /*saveUsePOSIX*/ );			}			catch(e) {				if ( e.message.search(/cancel/i) != -1 ) {					w = maxWidth + 1;					h = maxHeight + 1;				}				eArray[eArray.length] = e;				errors++;				// debugger;			} // end catch            tests++;                         layerFormatLog.write( w + ",\t" + h + ",\t" + d + ",\t" + false /*saveUsePOSIX*/ + ",\t" + timeSave.getElapsed() + ",\t" );            			var timeSave = new Timer();				            fileIndex++;             			f = new File( fileStr + fileIndex.toString() + formatExtension );			try {            	            	LayerFormatSave( f, true /*saveUsePOSIX*/ );			}			catch(e) {				if ( e.message.search(/cancel/i) != -1 ) {					w = maxWidth + 1;					h = maxHeight + 1;				}				eArray[eArray.length] = e;				errors++;				// debugger;			} // end catch            tests++;                        fileIndex--;                         layerFormatLog.write( true /*saveUsePOSIX*/ + ",\t" + timeSave.getElapsed() + ",\t" );                         // document should not be dirty, no need to pass save params            activeDocument.close();                         var timeOpen = new Timer();             			f = new File( fileStr + fileIndex.toString() + formatExtension );			try {            	            	LayerFormatOpen( f, true /*openUsePOSIX*/, openAsSmart );                if ( activeDocument.width != w )                     errors++;                if ( activeDocument.height != h )                     errors++;                                    if ( activeDocument.layers.length != 2 )                	errors++;                	                if ( activeDocument.artLayers[1].name != "LayerFormat Test 1" )                	errors++;                             if ( activeDocument.artLayers[0].name != "LayerFormat Test 2" )                	errors++;                // we open as smart object so the document is dirty                activeDocument.close( SaveOptions.DONOTSAVECHANGES );             			}			catch(e) {				if ( e.message.search(/cancel/i) != -1 ) {					w = maxWidth + 1;					h = maxHeight + 1;				}				eArray[eArray.length] = e;				errors++;				// debugger;			} // end catch            tests++;                        layerFormatLog.write( true /*openUsePOSIX*/ + ",\t" + timeOpen.getElapsed() + ",\t" );                        fileIndex++;            var timeOpen = new Timer();             			f = new File( fileStr + fileIndex.toString() + formatExtension );			try {            	            	LayerFormatOpen( f, false /*openUsePOSIX*/, openAsSmart );                if ( activeDocument.width != w )                     errors++;                if ( activeDocument.height != h )                     errors++;                             if ( activeDocument.artLayers[1].name != "LayerFormat Test 1" )                	errors++;                             if ( activeDocument.artLayers[0].name != "LayerFormat Test 2" )                	errors++;                // we open as smart object so the document is dirty                activeDocument.close( SaveOptions.DONOTSAVECHANGES );			}			catch(e) {				if ( e.message.search(/cancel/i) != -1 ) {					w = maxWidth + 1;					h = maxHeight + 1;				}				eArray[eArray.length] = e;				errors++;				// debugger;			} // end catch            tests++;                        layerFormatLog.writeln( false /*openUsePOSIX*/ + ",\t" + timeOpen.getElapsed() + ",\t" + estFileSize + ",\t" + errors + ",\t" + tests );                        openAsSmart = !openAsSmart;                        fileIndex++;             if ( timeIt.getElapsed() > maxTime ) {                w = maxWidth + 1;                h = maxHeight + 1;            }                     tests++;			}		catch(e) {			if ( e.message.search(/cancel/i) != -1 ) {				w = maxWidth + 1;				h = maxHeight + 1;			}			eArray[eArray.length] = e;			errors++;			// debugger;		} // end catch	} // end for height} // end for widthlayerFormatLog.writeln( errors + " errors. " + tests + " tests in " + timeIt.getElapsed() + " seconds. " + tests/timeIt.getElapsed() + " tests/sec.");layerFormatLog.writeln( maxEstSize + " was the largest estimated size." )layerFormatLog.close();if ( ! BringToFront() ) {    layerFormatLog.execute();}// end cleanwhile (documents.length) {    activeDocument.close(SaveOptions.DONOTSAVECHANGES);}// what about a diff or fc with app.execute()// probably should clean up but I want to inspect them f.remove();//var fileIndex = 1;//var f = new File( fileStr + fileIndex.toString() + formatExtension );//while (f.exists) {//	f.remove();//	fileIndex++;//	f = new File( fileStr + fileIndex.toString() + formatExtension );//}// Reset the application preferencespreferences.rulerUnits = startRulerUnits;preferences.typeUnits = startTypeUnits;displayDialogs = startDisplayDialogs;//     1) " FAIL" for failures//     2) " PASS" for test results OK//     3) "  BUG" for known bugs, have the file name give the bug number//     4) "ERROR" this comes from the harness if the script barfed/exception,if (errors == 0) {	errors = ' PASS';} else {	errors = ' FAIL';}	LogMessage( errors + "\n" );ShowAlert( errors );return errors;} // end function main////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function LayerFormatSave( f, usePOSIX ) {    var idsave = charIDToTypeID( "save" );    var desc = new ActionDescriptor();    var idas = stringIDToTypeID( "as" );    var descAs = new ActionDescriptor();    var iduseP = charIDToTypeID( "useP" );    descAs.putBoolean( iduseP, usePOSIX );    var idAdobeSDKLayerFormat = stringIDToTypeID( "AdobeSDK LayerFormat" );    desc.putObject( idas, idAdobeSDKLayerFormat, descAs );    var idIn = charIDToTypeID( "In  " );    desc.putPath( idIn, f );    executeAction( idsave, desc, ShowDialog() );}//////////////////////////////////////////////////////////////////////////////function LayerFormatOpen( f, usePOSIX, openAsSmart ) {    var idOpn = charIDToTypeID( "Opn " );    var desc = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );    desc.putPath( idnull, f );    var idas = stringIDToTypeID( "as" );    var descAs = new ActionDescriptor();    var iduseP = charIDToTypeID( "useP" );    var idopSm = charIDToTypeID( "opSm" );    descAs.putBoolean( idopSm, openAsSmart );    descAs.putBoolean( iduseP, usePOSIX );    var idAdobeSDKLayerFormat = stringIDToTypeID( "AdobeSDK LayerFormat" );    desc.putObject( idas, idAdobeSDKLayerFormat, descAs );    executeAction( idOpn, desc, ShowDialog() );}/****************************  Function WaitForRedraw  Usage: Use it to force Photoshop to redraw the screen before continuing  Example:        WaitForRedraw();****************************/function WaitForRedraw() {	var keyID = charIDToTypeID( "Stte" );	var desc = new ActionDescriptor();	desc.putEnumerated( keyID, keyID, charIDToTypeID( "RdCm" ) );	executeAction( charIDToTypeID( "Wait" ), desc, DialogModes.NO );}//////////////////////////////////////////////////////////////////////////////// WaitNSeconds, slow the script down so you can watch and figure out issues//////////////////////////////////////////////////////////////////////////////function WaitNSeconds(seconds) {   startDate = new Date();   endDate = new Date();   while ((endDate.getTime() - startDate.getTime()) < (1000 * seconds)) 		endDate = new Date();}//////////////////////////////////////////////////////////////////////////////// FitOnScreen, fits the document and redraws the screen//////////////////////////////////////////////////////////////////////////////function FitOnScreen() {	var id45 = charIDToTypeID( "slct" );    var desc7 = new ActionDescriptor();    var id46 = charIDToTypeID( "null" );	var ref1 = new ActionReference();	var id47 = charIDToTypeID( "Mn  " );	var id48 = charIDToTypeID( "MnIt" );	var id49 = charIDToTypeID( "FtOn" );	ref1.putEnumerated( id47, id48, id49 );	desc7.putReference( id46, ref1 );	executeAction( id45, desc7, DialogModes.NO );}//////////////////////////////////////////////////////////////////////////////// Library for timing things in JavaScript//////////////////////////////////////////////////////////////////////////////function Timer() {	// member variables	this.startTime = new Date();	this.endTime = new Date();		// member functions		// reset the start time to now	this.start = function () { this.startTime = new Date(); }		// reset the end time to now	this.stop = function () { this.endTime = new Date(); }		// get the difference in milliseconds between start and stop	this.getTime = function () { return (this.endTime.getTime() - this.startTime.getTime()) / 1000; }		// get the current elapsed time from start to now, this sets the endTime	this.getElapsed = function () { this.endTime = new Date(); return this.getTime(); }}//////////////////////////////////////////////////////////////////////////////// ScriptListener output for a Spectrum gradient using percentages//////////////////////////////////////////////////////////////////////////////function SpectrumGradient() {	var idgradientClassEvent = stringIDToTypeID( "gradientClassEvent" );    var desc84 = new ActionDescriptor();    var idfrom = stringIDToTypeID( "from" );        var desc85 = new ActionDescriptor();        var idhorizontal = stringIDToTypeID( "horizontal" );        var idpercentUnit = stringIDToTypeID( "percentUnit" );        desc85.putUnitDouble( idhorizontal, idpercentUnit, 45.138889 );        var idvertical = stringIDToTypeID( "vertical" );        var idpercentUnit = stringIDToTypeID( "percentUnit" );        desc85.putUnitDouble( idvertical, idpercentUnit, 99.861111 );    var idpaint = stringIDToTypeID( "paint" );    desc84.putObject( idfrom, idpaint, desc85 );    var idto = stringIDToTypeID( "to" );        var desc86 = new ActionDescriptor();        var idhorizontal = stringIDToTypeID( "horizontal" );        var idpercentUnit = stringIDToTypeID( "percentUnit" );        desc86.putUnitDouble( idhorizontal, idpercentUnit, 44.444444 );        var idvertical = stringIDToTypeID( "vertical" );        var idpercentUnit = stringIDToTypeID( "percentUnit" );        desc86.putUnitDouble( idvertical, idpercentUnit, -0.277778 );    var idpaint = stringIDToTypeID( "paint" );    desc84.putObject( idto, idpaint, desc86 );    var idtype = stringIDToTypeID( "type" );    var idgradientType = stringIDToTypeID( "gradientType" );    var idlinear = stringIDToTypeID( "linear" );    desc84.putEnumerated( idtype, idgradientType, idlinear );    var iddither = stringIDToTypeID( "dither" );    desc84.putBoolean( iddither, true );    var iduseMask = stringIDToTypeID( "useMask" );    desc84.putBoolean( iduseMask, true );    var idgradient = stringIDToTypeID( "gradient" );        var desc87 = new ActionDescriptor();        var idname = stringIDToTypeID( "name" );        desc87.putString( idname, """$$$/DefaultGradient/Spectrum=Spectrum""" );        var idgradientForm = stringIDToTypeID( "gradientForm" );        var idgradientForm = stringIDToTypeID( "gradientForm" );        var idcustomStops = stringIDToTypeID( "customStops" );        desc87.putEnumerated( idgradientForm, idgradientForm, idcustomStops );        var idinterfaceIconFrameDimmed = stringIDToTypeID( "interfaceIconFrameDimmed" );        desc87.putDouble( idinterfaceIconFrameDimmed, 4096.000000 );        var idcolors = stringIDToTypeID( "colors" );            var list7 = new ActionList();                var desc88 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc89 = new ActionDescriptor();                    var idhue = stringIDToTypeID( "hue" );                    var idangleUnit = stringIDToTypeID( "angleUnit" );                    desc89.putUnitDouble( idhue, idangleUnit, 0.000000 );                    var idsaturation = stringIDToTypeID( "saturation" );                    desc89.putDouble( idsaturation, 100.000000 );                    var idbrightness = stringIDToTypeID( "brightness" );                    desc89.putDouble( idbrightness, 100.000000 );                var idHSBColorClass = stringIDToTypeID( "HSBColorClass" );                desc88.putObject( idcolor, idHSBColorClass, desc89 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc88.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc88.putInteger( idlocation, 0 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc88.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc88 );                var desc90 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc91 = new ActionDescriptor();                    var idred = stringIDToTypeID( "red" );                    desc91.putDouble( idred, 255.000000 );                    var idgrain = stringIDToTypeID( "grain" );                    desc91.putDouble( idgrain, 0.000000 );                    var idblue = stringIDToTypeID( "blue" );                    desc91.putDouble( idblue, 255.000000 );                var idRGBColor = stringIDToTypeID( "RGBColor" );                desc90.putObject( idcolor, idRGBColor, desc91 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc90.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc90.putInteger( idlocation, 614 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc90.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc90 );                var desc92 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc93 = new ActionDescriptor();                    var idred = stringIDToTypeID( "red" );                    desc93.putDouble( idred, 0.000000 );                    var idgrain = stringIDToTypeID( "grain" );                    desc93.putDouble( idgrain, 0.000000 );                    var idblue = stringIDToTypeID( "blue" );                    desc93.putDouble( idblue, 255.000000 );                var idRGBColor = stringIDToTypeID( "RGBColor" );                desc92.putObject( idcolor, idRGBColor, desc93 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc92.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc92.putInteger( idlocation, 1352 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc92.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc92 );                var desc94 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc95 = new ActionDescriptor();                    var idred = stringIDToTypeID( "red" );                    desc95.putDouble( idred, 0.000000 );                    var idgrain = stringIDToTypeID( "grain" );                    desc95.putDouble( idgrain, 255.000000 );                    var idblue = stringIDToTypeID( "blue" );                    desc95.putDouble( idblue, 255.000000 );                var idRGBColor = stringIDToTypeID( "RGBColor" );                desc94.putObject( idcolor, idRGBColor, desc95 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc94.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc94.putInteger( idlocation, 2007 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc94.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc94 );                var desc96 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc97 = new ActionDescriptor();                    var idred = stringIDToTypeID( "red" );                    desc97.putDouble( idred, 0.000000 );                    var idgrain = stringIDToTypeID( "grain" );                    desc97.putDouble( idgrain, 255.000000 );                    var idblue = stringIDToTypeID( "blue" );                    desc97.putDouble( idblue, 0.000000 );                var idRGBColor = stringIDToTypeID( "RGBColor" );                desc96.putObject( idcolor, idRGBColor, desc97 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc96.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc96.putInteger( idlocation, 2744 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc96.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc96 );                var desc98 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc99 = new ActionDescriptor();                    var idred = stringIDToTypeID( "red" );                    desc99.putDouble( idred, 255.000000 );                    var idgrain = stringIDToTypeID( "grain" );                    desc99.putDouble( idgrain, 255.000000 );                    var idblue = stringIDToTypeID( "blue" );                    desc99.putDouble( idblue, 0.000000 );                var idRGBColor = stringIDToTypeID( "RGBColor" );                desc98.putObject( idcolor, idRGBColor, desc99 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc98.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc98.putInteger( idlocation, 3441 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc98.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc98 );                var desc100 = new ActionDescriptor();                var idcolor = stringIDToTypeID( "color" );                    var desc101 = new ActionDescriptor();                    var idhue = stringIDToTypeID( "hue" );                    var idangleUnit = stringIDToTypeID( "angleUnit" );                    desc101.putUnitDouble( idhue, idangleUnit, 0.000000 );                    var idsaturation = stringIDToTypeID( "saturation" );                    desc101.putDouble( idsaturation, 100.000000 );                    var idbrightness = stringIDToTypeID( "brightness" );                    desc101.putDouble( idbrightness, 100.000000 );                var idHSBColorClass = stringIDToTypeID( "HSBColorClass" );                desc100.putObject( idcolor, idHSBColorClass, desc101 );                var idtype = stringIDToTypeID( "type" );                var idcolorStopType = stringIDToTypeID( "colorStopType" );                var iduserStop = stringIDToTypeID( "userStop" );                desc100.putEnumerated( idtype, idcolorStopType, iduserStop );                var idlocation = stringIDToTypeID( "location" );                desc100.putInteger( idlocation, 4096 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc100.putInteger( idmidpoint, 50 );            var idcolorStop = stringIDToTypeID( "colorStop" );            list7.putObject( idcolorStop, desc100 );        desc87.putList( idcolors, list7 );        var idtransparency = stringIDToTypeID( "transparency" );            var list8 = new ActionList();                var desc102 = new ActionDescriptor();                var idopacity = stringIDToTypeID( "opacity" );                var idpercentUnit = stringIDToTypeID( "percentUnit" );                desc102.putUnitDouble( idopacity, idpercentUnit, 100.000000 );                var idlocation = stringIDToTypeID( "location" );                desc102.putInteger( idlocation, 0 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc102.putInteger( idmidpoint, 50 );            var idtransferSpec = stringIDToTypeID( "transferSpec" );            list8.putObject( idtransferSpec, desc102 );                var desc103 = new ActionDescriptor();                var idopacity = stringIDToTypeID( "opacity" );                var idpercentUnit = stringIDToTypeID( "percentUnit" );                desc103.putUnitDouble( idopacity, idpercentUnit, 100.000000 );                var idlocation = stringIDToTypeID( "location" );                desc103.putInteger( idlocation, 4096 );                var idmidpoint = stringIDToTypeID( "midpoint" );                desc103.putInteger( idmidpoint, 50 );            var idtransferSpec = stringIDToTypeID( "transferSpec" );            list8.putObject( idtransferSpec, desc103 );        desc87.putList( idtransparency, list8 );    var idgradientClassEvent = stringIDToTypeID( "gradientClassEvent" );    desc84.putObject( idgradient, idgradientClassEvent, desc87 );	executeAction( idgradientClassEvent, desc84, DialogModes.NO );}//////////////////////////////////////////////////////////////////////////////// Send a log message to the ESTK if it is running//////////////////////////////////////////////////////////////////////////////function LogMessage( inMessage ) {	if ( BridgeTalk.isRunning( "estoolkit" ) )		$.writeln( inMessage );}function ShowAlert( inMessage ) {    if ( typeof gHarness == "undefined" || gHarness.showAlerts ) {        alert( inMessage );    }}function ShowDialog( ) {    if ( typeof gHarness == "undefined" || typeof gHarness.showDialogs == "undefined" ) {        return DialogModes.NO;    }     return gHarness.showDialogs;}function MaxTime( inTime ) {    if ( typeof gHarness == "undefined" || typeof gHarness.maxTime == "undefined" ) {        return inTime;    }     return gHarness.maxTime;}function BringToFront( ) {    if ( typeof gHarness == "undefined" || typeof gHarness.bringToFront == "undefined" ) {        return false;    }     return gHarness.bringToFront;}// end LayerFormat.jsx